# library(data.table); library(rtdists);
# data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# setDT(data1) # convert to data.table
# setDT(data2)
# data1[, subject := 1] # add subject id
# data2[, subject := 2]
# dataAll <- rbind(data1, data2)
# dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
# dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
# fit_ddmfull(data = dataAll[subject == 1], rts = "rt", responses = "response", id = "subject") # fit model to each subject 1
# fit_ddmfull(data = dataAll[subject == 2], rts = "rt", responses = "response", id = "subject") # fit model to each subject 2
# fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
# # fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
# fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1") # fit model to each subject by cond1
# fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")) # fit model to each subject by cond1,cond2
# fit_ddmfull(data = dataAll, rts = "rt", responses = "response") # fit model to just entire data set (1 subject, 1 condition)
fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = F)
startingValues <- expand.grid(a = seq(0.5, 4.5, by = 1.5), v = seq(-3, 3, by = 1.5), t0 = c(0.3, 0.6), z = c(0.4, 0.6), st0 = c(0.1, 0.2), sz = c(0.1, 0.2), sv = c(0.1, 0.2))
fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = F)
fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = T)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
library(data.table); library(rtdists);
data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
setDT(data1) # convert to data.table
setDT(data2)
data1[, subject := 1] # add subject id
data2[, subject := 2]
dataAll <- rbind(data1, data2)
dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1") # fit model to each subject by cond1
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")) # fit model to each subject by cond1,cond2
fit_ddm(data = dataAll, rts = "rt", responses = "response") # fit model to just entire data set (1 subject, 1 condition)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
startingValues <- expand.grid(a = seq(0.5, 4.5, by = 1.5), v = seq(-3, 3, by = 1.5), t0 = c(0.3, 0.6), z = c(0.4, 0.6))
startingValues <- expand.grid(a = seq(0.5, 4.5, by = 1.5), v = seq(-3, 3, by = 1.5), t0 = c(0.3, 0.6), z = c(0.4, 0.6))
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:5,], parallel = T)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:5,], parallel = F)
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddmfull.R")
startingValues <- expand.grid(a = seq(0.5, 4.5, by = 1.5), v = seq(-3, 3, by = 1.5), t0 = c(0.3, 0.6), z = c(0.4, 0.6), st0 = c(0.1, 0.2), sz = c(0.1, 0.2), sv = c(0.1, 0.2))
fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = F)
fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = T)
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = F))
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:2,], parallel = T))
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:4,], parallel = F))
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:4,], parallel = T))
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:20,], parallel = F))
system.time(fit_ddmfull(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:20,], parallel = T))
availableCores()
library(doFuture)
registerDoFuture()
plan(multiprocess, workers = nbrOfWorkers() - 1)
registerDoFuture()
library(rtdists); library(ucminf); library(data.table); library(tidyverse); library(dtplyr); library(doFuture)
registerDoFuture()
plan(multiprocess, workers = nbrOfWorkers() - 1)
nbrOfWorkers()
registerDoFuture()
parallel
multiprocess
availableCores() - 1
plan(multiprocess, workers = availableCores() - 1)
paste0(nrow(startParams))
startParams <- matrix(c(1:3))
startParams
paste0(nrow(startParams))
paste0("Running parallel loops for ", nrow(startParams), " different starting values...")
# install packages
packages <- c("rtdists", "ucminf", "data.table", "tidyverse", "dtplyr", "doFuture")
toInstall <- packages[!(packages %in% installed.packages()[,"Package"])]
if (length(toInstall)) install.packages(toInstall)
rm(packages); rm(toInstall)
library(rtdists); library(ucminf); library(data.table); library(tidyverse); library(dtplyr); library(doFuture)
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5), simCheck = TRUE, decimal = 4, parallel = FALSE) {
if (parallel) {
registerDoFuture()
plan(multiprocess, workers = availableCores() - 1)
}
data <- tbl_dt(data)
# create new variables
data$rtCol <- data[, get(rts)]
data$responseCol <- data[, get(responses)]
# check if rt is in seconds
if (mean(data$rtCol, na.rm = T) > 100) {
stop("Check if reaction time is in seconds, not milliseconds!")
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data$temporary_subject <- 1
}
# remove rts or responses rows
data <- data[!is.na(rtCol), ]
data <- data[!is.na(responseCol), ]
# recode response accordingly (character and integer)
if (data[, unique(responseCol)][1] %in% c(0, 1)) {
data[, response_num := responseCol]
data[, response_char := ifelse(response_num == 1, 'upper', 'lower')]
} else if (data[, unique(responseCol)][1] %in% c('upper', 'lower')) {
data[, response_char := responseCol]
data[, response_num := ifelse(response_char == "upper", 1, 0)]
}
# compute rt and responses
behavOverall <- data[, .(response = round(mean(response_num, na.rm = T), 3), rtOverall = round(mean(rtCol, na.rm = T), 3)), by = c(id, group)]
behav0 <- data[response_num == 0, .(rt0 = round(mean(rtCol, na.rm = T), 3)), by = c(id, group)]
behav1 <- data[response_num == 1, .(rt1 = round(mean(rtCol, na.rm = T), 3)), by = c(id, group)]
behav <- left_join(behavOverall, behav0, by = c(id, group)) %>% left_join(behav1, by = c(id, group))
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
if (params['t0'] < 0.03 | params['a'] <= 0 | params['z'] <= 0 | params['z'] > 1) return(1e6)
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
dataGroup <- data[, .(n = .N), by = c(id, group)]
dataGroup0 <- data[response_num == 0, .(n0 = .N), by = c(id, group)]
dataGroup1 <- data[response_num == 1, .(n1 = .N), by = c(id, group)]
dataGroup <- left_join(dataGroup, dataGroup0, by = c(id, group)) %>% left_join(dataGroup1, by = c(id, group))
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
# optimize for each subject, each condition/group
# res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)] # nlminb optimization
if (any(class(startParams) %in% c("data.frame"))) {
if (parallel) {
message(paste0("Running parallel loops for ", nrow(startParams), " different starting values..."))
res <- foreach(startParamsI = 1:nrow(startParams)) %dopar% {
# startParametersTemp <- c(a = startParams$a[startParamsI], v = startParams$v[startParamsI], t0 = startParams$t0[startParamsI], z = startParams$z[startParamsI])
data[, ucminf(c(a = startParams$a[startParamsI], v = startParams$v[startParamsI], t0 = startParams$t0[startParamsI], z = startParams$z[startParamsI]), likelihood_ddm, rt = rtCol, response = response_char)[c('par', 'value', 'convergence')], by = c(id, group)] # ucminf optimization
}
res <- rbindlist(res)
} else {
message("Starting parameters for optimization:")
res <- data.frame()
for (startParamsI in 1:nrow(startParams)) {
startParametersTemp <- c(a = startParams$a[startParamsI], v = startParams$v[startParamsI], t0 = startParams$t0[startParamsI], z = startParams$z[startParamsI])
print(startParametersTemp)
resTemp <- data[, ucminf(startParametersTemp, likelihood_ddm, rt = rtCol, response = response_char)[c('par', 'value', 'convergence')], by = c(id, group)] # ucminf optimization
res <- bind_rows(res, resTemp)
}
}
setDT(res)
res <- distinct(res) # get rid of results/rows with exactly same results
colNamesOriginal <- names(res) # save column order
res <- left_join(res[, .(value = min(value)), by = c(id, group)], res, by = c(id, group, "value")) # find minimum values by group
setcolorder(res, names(colNamesOriginal)) # reorder columns to original order
} else {
message("Starting parameters for optimization:")
print(startParams)
res <- data[, ucminf(startParams, likelihood_ddm, rt = rtCol, response = response_char)[c('par', 'value', 'convergence')], by = c(id, group)] # ucminf optimization
setDT(res)
}
res[, parName := c("a", "v", "t0", "z")]
# convert long to wide form
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
}
formulaString <- paste(formulaString, "convergence", "value", sep = " + ")
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
# print(form)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(dataGroup, resultsWide, by = c(id, group))
resultsFinal <- select(resultsWide2, id, group, n:n1, a, v, t0, z, everything())
resultsFinal <- left_join(resultsFinal, behav, by = c(id, group))
setDT(resultsFinal)
# print(resultsFinal)
# simulate data
if (simCheck) {
resultsToSimulate <- copy(resultsFinal)
simulatedData <- resultsToSimulate[, rdiffusion(n = 1000, a = a, v = v, t0 = t0, z = z * a), by = c(id, group)]
simulatedData[, response_num := as.numeric()]
simulatedData[response == 'upper', response_num := 1]
simulatedData[response == 'lower', response_num := 0]
simulateBehavOverall <- simulatedData[, .(responseSim = round(mean(response_num, na.rm = T), 3), rtOverallSim = round(mean(rt, na.rm = T), 3)), by = c(id, group)]
simulateBehav0 <- simulatedData[response_num == 0, .(rt0Sim = round(mean(rt, na.rm = T), 3)), by = c(id, group)]
simulateBehav1 <- simulatedData[response_num == 1, .(rt1Sim = round(mean(rt, na.rm = T), 3)), by = c(id, group)]
simulateBehav <- left_join(simulateBehavOverall, simulateBehav0, by = c(id, group)) %>% left_join(simulateBehav1, by = c(id, group))
resultsFinal <- left_join(resultsFinal, simulateBehav, by = c(id, group))
resultsFinal <- select(resultsFinal, 1, group, n:value, response, responseSim, rtOverall, rtOverallSim, rt0, rt0Sim, rt1, rt1Sim)
}
# round results
resultsFinal[, a := round(a, decimal)]
resultsFinal[, v := round(v, decimal)]
resultsFinal[, t0 := round(t0, decimal)]
resultsFinal[, z := round(z, decimal)]
# remove temporary_subject variable
if (id == "temporary_subject") {
resultsFinal[, temporary_subject := NULL]
}
return(tbl_dt(resultsFinal))
}
#### test function
# library(data.table); library(rtdists);
# data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# setDT(data1) # convert to data.table
# setDT(data2)
# data1[, subject := 1] # add subject id
# data2[, subject := 2]
# dataAll <- rbind(data1, data2)
# dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
# dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1") # fit model to each subject by cond1
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")) # fit model to each subject by cond1,cond2
# fit_ddm(data = dataAll, rts = "rt", responses = "response") # fit model to just entire data set (1 subject, 1 condition)
library(data.table); library(rtdists);
data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
setDT(data1) # convert to data.table
setDT(data2)
data1[, subject := 1] # add subject id
data2[, subject := 2]
dataAll <- rbind(data1, data2)
dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
startingValues <- expand.grid(a = seq(0.5, 4.5, by = 1.5), v = seq(-3, 3, by = 1.5), t0 = c(0.3, 0.6), z = c(0.4, 0.6))
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:5,], parallel = T)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"), startParams = startingValues[1:5,], parallel = F)
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
summaryh(glm(vs ~ 1, mtcars, family = "binomial"), confInterval = 0.7)
summaryh(glm(vs ~ cyl, mtcars, family = "binomial"), confInterval = 0.7)
summaryh(glm(vs ~ 1, mtcars, family = "binomial"))
summaryh(glm(vs ~ cyl, mtcars, family = "binomial"))
summaryh(lm(vs ~ 1, mtcars), confInterval = 0.7, decimal = 10)
summaryh(lm(vs ~ 1, mtcars), confInterval = 0.7)
summaryh(lm(vs ~ 1, mtcars))
summaryh(lm(vs ~ cyl + disp, mtcars))
summaryh(lm(vs ~ cyl + disp, mtcars), confInterval = 0.8)
#' Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
#'    data: a data frame.
#'    measurevar: the name of a column that contains the variable to be summariezed
#'    groupvars: a vector containing names of columns that contain grouping variables
#'    na.rm: a boolean that indicates whether to ignore NA's
#'    conf.interval: the percent range of the confidence interval (default is 95%)
#'    http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/
#' Last modified by Hause Lin 10-03-18 21:25 hauselin@gmail.com
# install packages if necessary
packages <- c("tidyverse", "data.table", "dtplyr")
toInstall <- packages[!(packages %in% installed.packages()[,"Package"])]
if (length(toInstall)) install.packages(toInstall)
rm(packages); rm(toInstall)
library(tidyverse); library(data.table); library(dtplyr)
se <- function (data = NULL, measurevar, groupvars = NULL, na.rm = TRUE, conf.interval = 0.95, toNumeric = TRUE) {
# convert to datatable and tibble
data <- data.table(data)
# function to compute N without NAs
length2 <- function(x, na.rm = FALSE) {
if (na.rm)
sum(!is.na(x))
else length(x)
}
resultsList <- list() # empty list to store results
for (i in 1:length(measurevar)) {
if (sum( data.frame(data)[, measurevar[i]] %in% c(Inf, -Inf)) > 0) { # if measurvar contains Inf or -Inf, stop the script
stop(paste0("\nInf or -Inf is in ", measurevar[i], " variable"))
}
# compute mean by group
datac <- data[, .(unlist(lapply(.SD, length2, na.rm = na.rm)),
unlist(lapply(.SD, mean, na.rm = na.rm)),
unlist(lapply(.SD, sd, na.rm = na.rm))),
by = groupvars, .SDcols = measurevar[i]]
setnames(datac, c(groupvars, "N", measurevar[i], "sd")) # rename column names
setkeyv(datac, groupvars) # sort table
datac[, se := sd / sqrt(N)] # compute standard error
ciMult <- qt(conf.interval / 2 + 0.5, unlist(datac$N) - 1)
datac[, ci := se * ciMult]
if (toNumeric) {
# convert columns to numeric class if possible, else, leave as character
oldwarning <- getOption("warn")
options(warn = -1)
for (j in 1:(ncol(datac)-4)) { # exclude last few columns (outcome, sd, se, ci)
if (sum(is.na(as.numeric(as.character(datac[[j]])))) == 0) {
datac[[j]] <- as.numeric(datac[[j]])
} else {
datac[[j]] <- as.character(datac[[j]])
}
}
options(warn = oldwarning)
}
resultsList[[measurevar[i]]] <- tbl_df(datac)
}
if (length(measurevar) == 1) {
return(resultsList[[measurevar[1]]])
} else {
return(resultsList)
}
}
#### examples ####
# se(data = mtcars, measurevar = "disp", groupvars = c("cyl"))
# se(data = mtcars, measurevar = c("mpg", "disp"), groupvars = c("cyl", "am"))
# se(data = mtcars, measurevar = c("mpg", "disp"), groupvars = c("cyl", "vs"))
# se(data = ChickWeight, measurevar = "weight", groupvars = "Diet")
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
# norm data (this function will only be used by seWithin, and won't have to be called directly)
normWithin <- function (data = NULL, idvar, measurevar, betweenvars = NULL, na.rm = TRUE) {
data <- tbl_dt(data)
setkeyv(data, idvar) # sort by idvar
data.subjMean <- data[, .(unlist(lapply(.SD, mean, na.rm = na.rm))), by = c(idvar, betweenvars), .SDcols = measurevar] # compute mean for each subject
setnames(data.subjMean, c(idvar, betweenvars,'subjMean'))
dataNew <- left_join(data, data.subjMean)
setkeyv(dataNew, c(idvar, betweenvars)) # sort
measureNormedVar <- paste0(measurevar, "Normed")
# dataNew <- data.frame(dataNew)
# dataNew[, measureNormedVar] <- dataNew[, measurevar] - unlist(data[, "subjMean"]) + mean(data[, measurevar], na.rm = na.rm)
dataNew[, (measureNormedVar) := get(measurevar) - subjMean + mean(get(measurevar), na.rm = T)]
dataNew$subjMean <- NULL
return(data.frame(dataNew))
}
#### examples ####
# normWithin(data = sleep, idvar = "ID", measurevar = "extra", betweenvars = "group") %>% arrange(ID)
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
#'    showNormed: whether to show the normed version of the outcome variable
# within-subjects CI (normed and un-normed versions)
seWithin <- function (data = NULL, measurevar, betweenvars = NULL, withinvars = NULL, idvar = NULL, na.rm = TRUE, conf.interval = 0.95, showNormed = FALSE) {
data <- data.frame(data) # convert to data.frame
# Check if betweenvars and withinvars are factors
factorvars <- sapply(data[, c(betweenvars, withinvars), drop = FALSE],
FUN = is.factor)
# Ensure that the betweenvars and withinvars are factors
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
resultsList <- list() # empty list to store results
for (i in 1:length(measurevar)) {
# if measurvar contains Inf or -Inf, stop the script
if (sum( data[, measurevar[i]] %in% c(Inf, -Inf)) > 0) {
stop(paste0("\nInf or -Inf is in ", measurevar[i], " variable"))
}
# Get the means from the un-normed data
datac <- se(data, measurevar[i], groupvars = c(betweenvars, withinvars), na.rm = na.rm, conf.interval = conf.interval, toNumeric = FALSE)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normWithin(data, idvar, measurevar[i], betweenvars, na.rm)
# This is the name of the new column
measurevar_n <- paste(measurevar[i], "Normed", sep = "")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- se(ndata, measurevar_n, groupvars = c(betweenvars, withinvars), na.rm = na.rm, conf.interval = conf.interval, toNumeric = FALSE)
# Apply correction from Morey (2008) to the standard error and confidence interval
# Get the product of the number of conditions of within-S variables
nWithinGroups <- prod(vapply(ndatac[,withinvars, drop = FALSE], FUN = function(x) length(levels(x)), FUN.VALUE = numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
ndatacTbl <- tbl_dt(ndatac)
# Apply the correction factor
# setnames(ndatacTbl, c("sd", "se"), c("stdev", "stderror"))
# print(ndatacTbl)
ndatacTbl[, `:=` (sd = sd * correctionFactor, se = se * correctionFactor, ci = ci * correctionFactor)]
# print(ndatacTbl)
# setnames(ndatacTbl, c("stdev", "stderror"), c("sd", "se"))
# Combine the un-normed means with the normed results
merged <- left_join(datac, ndatacTbl)
merged <- mutate_if(merged, is.factor, as.character) #if factor, convert to character
merged[order( unlist((merged[, 1])), decreasing =  F), ] #arrange by first column
merged <- tbl_dt(merged)
message("Factors have been converted to characters.")
# convert columns to numeric class if possible, else, leave as character
oldwarning <- getOption("warn")
options(warn = -1)
for (j in 1:(ncol(merged)-4)) { # exclude last few columns (outcome, sd, se, ci)
if (sum(is.na(as.numeric(as.character(merged[[j]])))) == 0) {
merged[[j]] <- as.numeric(merged[[j]])
} else {
merged[[j]] <- as.character(merged[[j]])
}
}
options(warn = oldwarning)
# whether to show normed version
if (showNormed == FALSE) {
# print(measurevar_n)
merged[, (measurevar_n) := NULL]
}
resultsList[[measurevar[i]]] <- data.table(merged)
message(cat("Confidence intervals: ", conf.interval, sep = ""))
}
if (length(measurevar) == 1) {
print(resultsList[[measurevar[1]]])
return(resultsList[[measurevar[1]]])
} else {
print(resultsList)
return(resultsList)
}
}
#### examples ####
# seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
# seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick", showNormed = TRUE)
# library(ggplot2)
# seWithin(data = diamonds, measurevar = c("carat"), betweenvars = "cut", withinvars = "color", idvar = "clarity")
# a <- seWithin(data = diamonds, measurevar = c("carat", "depth", "z"), betweenvars = "cut", withinvars = "color", idvar = "clarity")
# a$carat
# a$depth
# a$z
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
debugSource('~/Dropbox/Working Datasets/functionsR/se.R', echo=TRUE)
seWithin(data = ChickWeight, measurevar = "weight", betweenvars = "Diet", withinvars = "Time", idvar = "Chick")
data
data
# Check if betweenvars and withinvars are factors
factorvars <- sapply(data[, c(betweenvars, withinvars), drop = FALSE], FUN = is.factor)
# Ensure that the betweenvars and withinvars are factors
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ", paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
resultsList
resultsList <- list() # empty list to store results
1:length(measurevar)
i <- 1
# if measurvar contains Inf or -Inf, stop the script
if (sum( data[, measurevar[i]] %in% c(Inf, -Inf)) > 0) {
stop(paste0("\nInf or -Inf is in ", measurevar[i], " variable"))
}
datac <- se(data, measurevar[i], groupvars = c(betweenvars, withinvars), na.rm = na.rm, conf.interval = conf.interval, toNumeric = FALSE)
data
datac
data
data[, .(weight = mean(weight, na.rm = T)), by = .(Chici, Diet, Time)]
data[, .(weight = mean(weight, na.rm = T)), by = .(Chick, Diet, Time)]
data.table(data)[, .(weight = mean(weight, na.rm = T)), by = .(Chick, Diet, Time)]
data.table(data)[, .(weight = mean(weight, na.rm = T)), by = .(Chick)]
data.table(data)[, .(weight = mean(weight, na.rm = T)), by = .(Chick, Diet)]
seWithin(data = ChickWeight, measurevar = "weight", withinvars = "Time", idvar = "Chick")
data
# Check if betweenvars and withinvars are factors
factorvars <- sapply(data[, c(betweenvars, withinvars), drop = FALSE], FUN = is.factor)
# Ensure that the betweenvars and withinvars are factors
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ", paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
resultsList <- list() # empty list to store results
i <- 1
# if measurvar contains Inf or -Inf, stop the script
if (sum( data[, measurevar[i]] %in% c(Inf, -Inf)) > 0) {
stop(paste0("\nInf or -Inf is in ", measurevar[i], " variable"))
}
data
ChickWeight
length(ChickWeight)
dim(ChickWeight)
dim(data)
datac <- se(data, measurevar[i], groupvars = c(betweenvars, withinvars), na.rm = na.rm, conf.interval = conf.interval, toNumeric = FALSE)
datac
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
data
ndata <- normWithin(data, idvar, measurevar[i], betweenvars, na.rm)
ndata
# This is the name of the new column
measurevar_n <- paste(measurevar[i], "Normed", sep = "")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- se(ndata, measurevar_n, groupvars = c(betweenvars, withinvars), na.rm = na.rm, conf.interval = conf.interval, toNumeric = FALSE)
# Apply correction from Morey (2008) to the standard error and confidence interval
# Get the product of the number of conditions of within-S variables
nWithinGroups <- prod(vapply(ndatac[,withinvars, drop = FALSE], FUN = function(x) length(levels(x)), FUN.VALUE = numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
ndatacTbl <- tbl_dt(ndatac)
ndatacTbl
data
resultsList
resultsList <- list() # empty list to store results
resultsList
data
seWithin(data = ChickWeight, measurevar = "weight", withinvars = "Time", idvar = "Chick")
seWithin(data = ChickWeight, measurevar = "weight", withinvars = "Time", idvar = "Chick")
