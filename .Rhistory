# data1[, subject := 1] # add subject id
# data2[, subject := 2]
# dataAll <- rbind(data1, data2)
# dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
# dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
# dataAll$response <- ifelse(dataAll$response == "upper", 1, 0)
# fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
# fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1") # fit model to each subject by cond1
# fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")) # fit model to each subject by cond1,cond2
# fit_ezddm(data = dataAll, rts = "rt", responses = "response") # fit model to just entire data set (1 subject, 1 condition)
# ezddm(.802, .112, .723)
# ezddm(.5, .112, .723)
# ezddm(.51, .112, .723)
# ezddm(0, .112, .723)
# ezddm(0.0001, .112, .723)
# ezddm(0, .112, .723)
# ezddm(0.005, .112, .723)
# ezddm(0.005, .112, .723)
# ezddm(1, .112, .723, 100)
#
# ezddm(0.8881988, 0.1005484, 0.9010186)
# library(EZ2)
# Data2EZ(.802, .112, .723)
# Data2EZ(.5, .112, .723)
# Data2EZ(0.8881988, 0.1005484, 0.9010186)
# Data2EZ(0.1, 0.1005484, 0.9010186)
# Data2EZ(0.00001, 0.1005484, 0.9010186)
# ezddm(0.000001, 0.1005484, 0.9010186)
# ezddm(0.00001, 0.1005484, 0.9010186)
# ezddm(0.5, 0.1005484, 0.9010186)
# ezddm(0.51, 0.1005484, 0.9010186)
# data.frame(Data2EZ(.802, .112, .723))
library(rtdists)
rt1 <- rdiffusion(200, a=3, v=2, t0=0.5)
rt1$response <- ifelse(rt1$response == "upper", 1, 0)
rt1$rt2 <- rt1$rt * 1000
fit_ezddm(data = rt1, rts = "rt", responses = "response")
fit_ezddm(data = rt1, rts = "rt2", responses = "response")
# data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data1
data1
rbind(data1, data2)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
rbind(data1, data2)
dataAll <- rbind(data1, data2)
dataAll
dataAll
dataAll$response <- ifelse(dataAll$response == "upper", 1, 0)
dataAll
library(rtdists)
dataAll$subject <- rep(c(1, 2), each = 100)
dataAll
dataAll
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll
dataAll$cond1 <- sample(c("a", "b"), 600, replace = T) # randomly assign conditions a/b
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
dataAll
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
fit_ezddm(data = dataAll, rts = "rt", responses = "response")
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
# install packages
packages <- c("rtdists", "ucminf", "data.table")
toInstall <- packages[!(packages %in% installed.packages()[,"Package"])]
if (length(toInstall)) install.packages(toInstall)
rm(packages); rm(toInstall)
library(rtdists); library(ucminf); library(data.table)
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
dataGroup <- data[, .(n = .N), by = c(id, group)]
# optimize for each subject, each condition/group
# res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)] # nlminb optimization
res <- data[, ucminf(startParams, likelihood_ddm, rt = get(rts), response = get(responses))[c('par', 'value', 'convergence')], by = c(id, group)] # ucminf optimization
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
}
formulaString <- paste(formulaString, "convergence", "value", sep = " + ")
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
# print(form)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(dataGroup, resultsWide, by = c(id, group))
resultsFinal <- select(resultsWide2, id, group, n, a, v, t0, z, everything())
# print(resultsFinal)
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$temporary_subject <- NULL
}
setDT(resultsFinal)
return(resultsFinal[])
}
#### test function
# library(data.table); library(rtdists);
# data1 <- rdiffusion(n = 300, a = 2, v = 0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# data2 <- rdiffusion(n = 300, a = 2, v = -0.3, t0 = 0.5, z = 0.3 * 2) # simulate data
# setDT(data1) # convert to data.table
# setDT(data2)
# data1[, subject := 1] # add subject id
# data2[, subject := 2]
# dataAll <- rbind(data1, data2)
# dataAll[, cond1 := sample(c("a", "b"), 600, replace = T)] # randomly assign conditions a/b
# dataAll[, cond2 := sample(c("c", "d"), 600, replace = T)] # randomly assign conditions c/d
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject") # fit model to each subject (no conditions)
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1") # fit model to each subject by cond1
# fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")) # fit model to each subject by cond1,cond2
# fit_ddm(data = dataAll, rts = "rt", responses = "response") # fit model to just entire data set (1 subject, 1 condition)
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
# fit model to just entire data set (assumes all data came from 1 subject)
library(rtdists)
data1 <- rdiffusion(n = 200, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 200, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 200) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 400, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 400, replace = T) # randomly assign conditions y/z
?rdiffusion
fit_ddm(data = dataAll, rts = "rt", responses = "response")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
?ucminf
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
dataAll
# fit model to just entire data set (assumes all data came from 1 subject)
fit_ddm(data = dataAll, rts = "rt", responses = "response")
# fit model to each subject (no conditions)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
# fit model to each subject by cond1
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
# fit model to each subject by cond1,cond2
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
round(fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2")), 3)
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
# fit model to just entire data set (assumes all data came from 1 subject)
fit_ddm(data = dataAll, rts = "rt", responses = "response")
# fit model to each subject (no conditions)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
# fit model to each subject by cond1
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
# fit model to each subject by cond1,cond2
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$response <- ifelse(dataAll$response == "upper", 1, 0) # convert responses to 1 and 0
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
# fit model to just entire data set (assumes all data came from 1 subject)
fit_ezddm(data = dataAll, rts = "rt", responses = "response")
# fit model to each subject (no conditions)
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
# fit model to each subject by cond1
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
# fit model to each subject by cond1,cond2
fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
# load functions from my github site
# https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
summaryh(lm(mpg ~ qsec, mtcars))
model_lm <- lm(mpg ~ cyl, mtcars)
summary(model_lm) # base R summary()
summaryh(model_lm) # returns APA-formatted output
summaryh(model_lm, decimal = 5, showTable = T, showEffectSizesTable = T) # optional arguments
summaryh(model_lm)
summaryh(model_lm)[1, ]
summaryh(model_lm)$term
summaryh(model_lm)
summaryh(model_lm)[term == "cyl"]
summaryh(model_lm)[term == "cyl"]
summaryh(model_lm)
summaryh(model_lm)[term == 'cyl', results]
summaryh(model_lm) # returns APA-formatted output
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/summaryh.R")
summaryh(glm(vs ~ 1, mtcars, family = "binomial"))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(glm(vs ~ 1, mtcars, family = "binomial"))
?sprintf
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
lm(scale(mpg) ~ scale(cyl), mtcars)
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
summary(lm(scale(mpg) ~ scale(cyl), mtcars))
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(lm(scale(mpg) ~ scale(gears), mtcars))
summaryh(lm(scale(mpg) ~ scale(gear), mtcars))
summaryh(aov(scale(mpg) ~ scale(gear), mtcars))
summaryh(aov(scale(mpg) ~ scale(gear), mtcars))
summaryh(lm(scale(mpg) ~ scale(gear), mtcars))
summaryh(aov(scale(mpg) ~ scale(gear), mtcars))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
sem.model.fits(model)
?sem.model.fits
sem.model.fits(model)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
summary(lm(scale(mpg) ~ scale(cyl), mtcars))
summaryh(lm(scale(mpg) ~ scale(cyl), mtcars))
summaryh(cor.test(mtcars$mpg, mtcars$gear))
summaryh(t.test(mpg ~ vs, mtcars))
summaryh(glm(vs ~ 1, mtcars, family = "binomial"))
summaryh(aov(mpg ~ gear, mtcars))
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
summaryh(cor.test(mtcars$mpg, mtcars$cyl), 3, T, T)
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
summaryh(cor.test(mtcars$mpg, mtcars$cyl), 5, T, T)
model
class(model)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(model)
summaryh(model, 4, T,T)
summaryh(anova(model), 4, T,T)
anova(model)
class(anova(model))
class(aov(mpg ~ gears, mtcars))
class(aov(mpg ~ gear, mtcars))
model <- anova(model)
model
summaryh(model)
class(model)
class(lm(mpg ~ gear, mtcars))
class(aov(lm(mpg ~ gear, mtcars)))
class(anova(lm(mpg ~ gear, mtcars)))
anova(lm(mpg ~ gear, mtcars))
model
class(model)[1]
class(model)[1] == "anova"
estimates <- data.frame(model) # get estimates and put in dataframe
estimates
effectNames <- rownames(estimates) # get names of effects
effectNames
colnames(estimates) <- tolower(colnames(estimates))
estimates
estimates$dfResid
estimates
estimates["Residuals", "df"]
estimates
model
View(model)
estimates
estimates$dfResid <- estimates["Residuals", "df"]  # get model degrees of freedom
estimates
estimates$dfResid
estimates$dfResid
isnull(estimates$dfResid)
(isnull(estimates$dfResid))
(is.null(estimates$dfResid))
estimates
estimates
estimates[, c(1, 2, 3)]
estimates
estimates[, c(3, 1, 2, 5, 6, 4)]
if (is.null(estimates$dfResid)) { # MLM models have something different...
estimates <- estimates[, c(3, 1, 2, 5, 6, 4)]
}
estimates
colnames(estimates) <- c('df', 'sum.sq', 'mean.sq', 'f.value', 'p.value', 'df.resid') # rename columns
estimates
estimates <- data.frame(term = effectNames, estimates, stringsAsFactors = FALSE)
estimates
rownames(estimates) <- NULL
estimates
estimates <- estimates[estimates$term != "Residuals", ]
estimates
estimates$term
estimates
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
summaryh(model)
summary(anova(model))
anova(model)
summaryh(anova(model))
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
model
model
model <- anova(model)
model
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
effectNames <- rownames(estimates) # get names of effects
effectNames
colnames(estimates) <- tolower(colnames(estimates))
estimates$dfResid <- estimates["Residuals", "df"]  # get model degrees of freedom
estimates
estimates$dfResid
if (is.null(estimates$dfResid)) { # MLM models have something different...
estimates <- estimates[, c(3, 1, 2, 5, 6, 4)]
}
estimates
colnames(estimates) <- c('df', 'sum.sq', 'mean.sq', 'f.value', 'p.value', 'df.resid') # rename columns
estimates <- data.frame(term = effectNames, estimates, stringsAsFactors = FALSE)
rownames(estimates) <- NULL
estimates
estimates <- estimates[estimates$term != "Residuals", ]
estimates
# effect sizes
esCohensf <- cohens_f(model) # calculate Cohen's f
esCohensf
model
esCohensf
model
cohens_f(aov(mpg ~ gear, mtcars))
model
cohens_f(model)
class(aov(mpg ~ gear, mtcars))
model
aov(mpg ~ gear, mtcars)
?cohens_f
anova_stats(model = )
anova_stats(model)
mixedEffectsModel <- T
mixedEffectsModel
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
es(f = NA)
es(f = 0)
mixedEffectsModel
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
model <- (aov(mpg ~ gear, mtcars))
model
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
effectNames <- rownames(estimates) # get names of effects
colnames(estimates) <- tolower(colnames(estimates))
estimates$dfResid <- estimates["Residuals", "df"]  # get model degrees of freedom
estimates
estimates$dfResid
estimates$dfResid
is.null(estimates$dfResid)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(lm(mpg ~ gear, mtcars))
summaryh(anova(lm(mpg ~ gear, mtcars)))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(anova(lm(mpg ~ gear + vs, mtcars)))
summaryh(anova(lm(mpg ~ gear + vs, mtcars)))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(lm(mpg ~ gear + vs, mtcars))
# linear regression
model_lm <- lm(mpg ~ cyl, mtcars)
summary(model_lm) # base R summary()
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
##           term                                                 results
## 1: (Intercept) b = 37.88, SE = 2.07, t(30) = 18.27, p < .001, r = 0.96
## 2:         cyl b = −2.88, SE = 0.32, t(30) = −8.92, p < .001, r = 0.85
summaryh(model_lm, decimal = 5, showTable = T, showEffectSizesTable = T) # optional arguments
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
summary(model_lm) # base R summary()
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summaryh(aov(mpg ~ gear, mtcars))
(aov(mpg ~ gear, mtcars))
summary(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
summaryh(cor.test(mtcars$mpg, mtcars$cyl), 3, T, T)
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
