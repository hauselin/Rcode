summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
summaryh(model)
summary(anova(model))
anova(model)
summaryh(anova(model))
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
model
model
model <- anova(model)
model
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
effectNames <- rownames(estimates) # get names of effects
effectNames
colnames(estimates) <- tolower(colnames(estimates))
estimates$dfResid <- estimates["Residuals", "df"]  # get model degrees of freedom
estimates
estimates$dfResid
if (is.null(estimates$dfResid)) { # MLM models have something different...
estimates <- estimates[, c(3, 1, 2, 5, 6, 4)]
}
estimates
colnames(estimates) <- c('df', 'sum.sq', 'mean.sq', 'f.value', 'p.value', 'df.resid') # rename columns
estimates <- data.frame(term = effectNames, estimates, stringsAsFactors = FALSE)
rownames(estimates) <- NULL
estimates
estimates <- estimates[estimates$term != "Residuals", ]
estimates
# effect sizes
esCohensf <- cohens_f(model) # calculate Cohen's f
esCohensf
model
esCohensf
model
cohens_f(aov(mpg ~ gear, mtcars))
model
cohens_f(model)
class(aov(mpg ~ gear, mtcars))
model
aov(mpg ~ gear, mtcars)
?cohens_f
anova_stats(model = )
anova_stats(model)
mixedEffectsModel <- T
mixedEffectsModel
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
es(f = NA)
es(f = 0)
mixedEffectsModel
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
model <- (aov(mpg ~ gear, mtcars))
model
# example output: F(3, 10) = 39, p < .001, r = 0.32
if (class(model)[1] == "anova") {
estimates <- data.frame(model) # get estimates and put in dataframe
} else if (class(model)[1] == "aov") {
estimates <- data.frame(anova(model)) # get estimates and put in dataframe
}
estimates
effectNames <- rownames(estimates) # get names of effects
colnames(estimates) <- tolower(colnames(estimates))
estimates$dfResid <- estimates["Residuals", "df"]  # get model degrees of freedom
estimates
estimates$dfResid
estimates$dfResid
is.null(estimates$dfResid)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summaryh(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(lm(mpg ~ gear, mtcars))
summaryh(anova(lm(mpg ~ gear, mtcars)))
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summary(model)
anova(model)
summaryh(anova(model))
summaryh(lm(mpg ~ qsec, mtcars))
summaryh(aov(mpg ~ gear + vs, mtcars))
summaryh(anova(lm(mpg ~ gear + vs, mtcars)))
summaryh(anova(lm(mpg ~ gear + vs, mtcars)))
summaryh(aov(mpg ~ gear, mtcars))
summaryh(lm(mpg ~ gear + vs, mtcars))
# linear regression
model_lm <- lm(mpg ~ cyl, mtcars)
summary(model_lm) # base R summary()
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
##           term                                                 results
## 1: (Intercept) b = 37.88, SE = 2.07, t(30) = 18.27, p < .001, r = 0.96
## 2:         cyl b = −2.88, SE = 0.32, t(30) = −8.92, p < .001, r = 0.85
summaryh(model_lm, decimal = 5, showTable = T, showEffectSizesTable = T) # optional arguments
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
summary(model_lm) # base R summary()
summaryh(model_lm) # returns APA-formatted output in a data.table (output below)
# linear mixed effects regression
library(lme4); library(lmerTest) # load packages to fit mixed effects models
model <- lmer(weight ~ Time * Diet  + (1 + Time | Chick), data = ChickWeight)
summary(model)
summaryh(model, decimal = 4, showTable = T, showEffectSizesTable = T) # optional arguments
summaryh(aov(mpg ~ gear, mtcars))
(aov(mpg ~ gear, mtcars))
summary(aov(mpg ~ gear, mtcars))
summaryh(aov(mpg ~ gear, mtcars))
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
summaryh(cor.test(mtcars$mpg, mtcars$cyl), 3, T, T)
cor.test(mtcars$mpg, mtcars$cyl)
summaryh(cor.test(mtcars$mpg, mtcars$cyl))
df1 <- tbl_dt(fread("/Users/Hause/Dropbox/Working Projects/160601 Save depletion/Save depletion 4 Stroop/Analysis/stroopDataV2.csv"))
df1[, rt := rt / 1000]
library(data.table); library(dtplyr)
df1 <- tbl_dt(fread("/Users/Hause/Dropbox/Working Projects/160601 Save depletion/Save depletion 4 Stroop/Analysis/stroopDataV2.csv"))
df1[, rt := rt / 1000]
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ezddm.R")
fit_ddm(data = df1[pNo %in% 101:103], rts = "rt", responses = "acc", id = "pNo", group = c("condition", "congruency"))
fit_ezddm(data = df1[pNo %in% 101:103], rts = "rt", responses = "acc", id = "pNo", group = c("condition", "congruency"))
fit_ddm(data = df1[pNo %in% 101:103], rts = "rt", responses = "acc", group = c("condition", "congruency"))
fit_ezddm(data = df1[pNo %in% 101:103], rts = "rt", responses = "acc", group = c("condition", "congruency"))
# load functions from my github site
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
# fit model to just entire data set (assumes all data came from 1 subject)
fit_ddm(data = dataAll, rts = "rt", responses = "response")
# fit model to each subject (no conditions)
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
# fit model to each subject by cond1
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
# fit model to each subject by cond1,cond2
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
# load functions from my github site
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
# fit model to just entire data set (assumes all data came from 1 subject)
fit_ddm(data = dataAll, rts = "rt", responses = "response")
dataAll
fit_ddm(data = dataAll, rts = "rt", responses = "response")
dataAll
# load functions from my github site
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
fit_ddm(data = dataAll, rts = "rt", responses = "response")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
# load functions from my github site
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ddm.R")
# simulate some data
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data
data
data[, a:z]
data[, a:sv]
source("https://raw.githubusercontent.com/hauselin/Rcode/master/fit_ezddm.R")
data <- fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
library(rtdists)
data1 <- rdiffusion(n = 100, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 100, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 100) # assign subject id
dataAll$cond1 <- sample(c("a", "b"), 200, replace = T) # randomly assign conditions a/b
dataAll$cond2 <- sample(c("y", "z"), 200, replace = T) # randomly assign conditions y/z
dataAll$response <- ifelse(dataAll$response == "upper", 1, 0) # convert responses to 1 and 0
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data
data <- fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data
names(data)
names(data) == "a"
which(names(data) == "a")
which(names(data) == "a") == 0
which(names(data) == "a")
is.null(which(names(data) == "a"))
which(names(data) == "a")
which(names(data) %in% c("a", "a_threshold"))
startColIdx <- which(names(data) %in% c("a", "a_threshold"))
startColIdx
?`rtdists-package`
?rdiffusion
names(data)
endColIdx <- which(names(data) %in% c("sz", "sv", "st0"))
endColIdx
endColIdx <- which(names(data) %in% c("sz", "sv", "st0", "z"))
endColIdx
names(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
parameterNames
parameterNames
which(names(data) %in% parameterNames)
data
startColIdx <- min(which(names(data) %in% parameterNames))
startColIdx
endColIdx <- max(which(names(data) %in% parameterNames))
endColIdx
fit_ddm(data = dataAll, rts = "rt", responses = "response")
select(data, startColIdx:endColIdx)
data
data
names(data)
params <- names(data)[startColIdx:endColIdx]
params
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
setDT(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(data) %in% parameterNames))
endColIdx <- max(which(names(data) %in% parameterNames))
params <- names(data)[startColIdx:endColIdx]
params
data
params
data
apply(data, 1, function(x) print(x))
data
apply(data, 1, function(x) print(x[, 5]))
apply(data, 1, function(x) print(x[5]))
params
apply(data, 1, function(x) print(x[params[1]]))
apply(data, 1, function(x) print(x[params[2]]))
data
apply(data, 1, function(x) print(x[params[3]]))
simsPerGroup = 1000
params
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
setDT(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(data) %in% parameterNames))
endColIdx <- max(which(names(data) %in% parameterNames))
params <- names(data)[startColIdx:endColIdx]
params
params[2]
apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
sapply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
simulatedData <- apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
simulatedData
params
simulatedData
unlist(simulatedData)
matrix(unlist(simulatedData), ncol = 2)
matrix(unlist(simulatedData))
unlist(simulatedData)
simulatedData
length(simulatedData)
rbindlist(simulatedData)
rbindlist(simulatedData)
data
data
data
params
data[, .(rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z))]
data
data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z))]
data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z)]
data
data[, trialType := 1:.N]
data
data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = trialType]
data
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = "cond1")
data
setDT(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(data) %in% parameterNames))
endColIdx <- max(which(names(data) %in% parameterNames))
params <- names(data)[startColIdx:endColIdx]
simulatedData <- apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
rbindlist(simulatedData)
data
data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = c("cond1")]
names(data)
names(data) == "n"
which(names(data) == "n")
which(names(data) == "n")
fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
fit_ddm(data = dataAll, rts = "rt", responses = "response")
conditionNames <- which(names(data) == "n")
conditionNames
nColIdx <- which(names(data) == "n")
nColIdx
nColIdx
nColIdx
nColIdx <- which(names(data) == "n")
if (nColIdx == 1) {
conditionNames <- NULL
} else {
conditionNames <- 2:(nColIdx-1)
}
nColIdx
conditionNames
conditionColIdx <- 2:(nColIdx-1)
conditionNames <- names(data)[conditionColIdx]
conditionNames
data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedData
simulatedData <- data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData
simulatedData$response
simulatedData$response
simulatedData$response == "upper"
ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedData
simulatedData
data
nColIdx <- which(names(data) == "n")
if (nColIdx == 1) {
conditionNames <- NULL
} else {
conditionColIdx <- 1:(nColIdx-1)
conditionNames <- names(data)[conditionColIdx]
}
conditionNames
simulatedData <- data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedData
simulatedDataMean <- simulatedData[, .(n = .N, rt = mean(rt, na.rm = T), response = mean(response, na.rm = T)), by = conditionNames]
simulatedDataMean
simulatedDataMean <- simulatedData[, .(n = .N, rtSim = mean(rt, na.rm = T), responseSim = mean(response, na.rm = T)), by = conditionNames]
simulatedDataMean
simulatedDataMean <- simulatedData[, .(nSim = .N, rtSim = mean(rt, na.rm = T), responseSim = mean(response, na.rm = T)), by = conditionNames]
simulatedDataMean
simulatedDataMean
left_join(data, simulatedData)
left_join(data, simulatedData) %>% tbl_dt()
a <- left_join(data, simulatedData)
a <- left_join(data, simulatedData, by = conditionNames)
a
combinedData <- left_join(data, simulatedData, by = conditionNames)
combinedData
setDT(combinedData)
combinedData
data
simulatedData
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data
setDT(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(data) %in% parameterNames))
endColIdx <- max(which(names(data) %in% parameterNames))
params <- names(data)[startColIdx:endColIdx]
# simulatedData <- apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
# rbindlist(simulatedData)
nColIdx <- which(names(data) == "n")
if (nColIdx == 1) {
conditionNames <- NULL
} else {
conditionColIdx <- 1:(nColIdx-1)
conditionNames <- names(data)[conditionColIdx]
}
simulatedData <- data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedData
simulatedDataMean <- simulatedData[, .(nSim = .N, rtSim = mean(rt, na.rm = T), responseSim = mean(response, na.rm = T)), by = conditionNames]
combinedData <- left_join(data, simulatedDataMean, by = conditionNames)
combinedData
setDT(combinedData)
combinedData
return(combinedData[])
fit_check <- function(data, simsPerGroup = 1000, returnSimulatedRawData = F) {
setDT(data)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(data) %in% parameterNames))
endColIdx <- max(which(names(data) %in% parameterNames))
params <- names(data)[startColIdx:endColIdx]
# simulatedData <- apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
# rbindlist(simulatedData)
nColIdx <- which(names(data) == "n")
if (nColIdx == 1) {
conditionNames <- NULL
} else {
conditionColIdx <- 1:(nColIdx-1)
conditionNames <- names(data)[conditionColIdx]
}
simulatedData <- data[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedDataMean <- simulatedData[, .(nSim = .N, rtSim = mean(rt, na.rm = T), responseSim = mean(response, na.rm = T)), by = conditionNames]
combinedData <- left_join(data, simulatedDataMean, by = conditionNames)
setDT(combinedData)
return(combinedData[])
}
fit_check(data = data)
data
fit_check(data = data)
fit_check <- function(parameters, simsPerGroup = 1000, returnSimulatedRawData = F) {
setDT(parameters)
parameterNames <- c("a", "v", "t", "z", "sz", "sv", "st0", "a_threshold", "v_drift", "ndt_Ter")
startColIdx <- min(which(names(parameters) %in% parameterNames))
endColIdx <- max(which(names(parameters) %in% parameterNames))
params <- names(parameters)[startColIdx:endColIdx]
# simulatedData <- apply(data, 1, function(x) rdiffusion(n = simsPerGroup, a = x[params[1]], v = x[params[2]], t0 = x[params[3]], z = x[params[4]]))
# rbindlist(simulatedData)
nColIdx <- which(names(parameters) == "n")
if (nColIdx == 1) {
conditionNames <- NULL
} else {
conditionColIdx <- 1:(nColIdx-1)
conditionNames <- names(parameters)[conditionColIdx]
}
simulatedData <- parameters[, rdiffusion(n = simsPerGroup, a = a, v = v, t0 = t0, z = z), by = conditionNames]
simulatedData$response <- ifelse(simulatedData$response == "upper", 1, 0) # convert responses to 1 and 0
simulatedDataMean <- simulatedData[, .(nSim = .N, rtSim = mean(rt, na.rm = T), responseSim = mean(response, na.rm = T)), by = conditionNames]
combinedData <- left_join(parameters, simulatedDataMean, by = conditionNames)
setDT(combinedData)
return(combinedData[])
}
data <- fit_ezddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject", group = c("cond1", "cond2"))
data
fit_check(parameters = data)
dataAll
dataAll[, .(rt = mean(rt))]
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject:cond2)]
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject, cond1, cond2)]
fit_check(parameters = data)
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
data
fit_check(parameters = data)
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject, cond1, cond2)]
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject)]
fit_check(parameters = data)
data1 <- rdiffusion(n = 1000, a = 2, v = 0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
data2 <- rdiffusion(n = 1000, a = 2, v = -0.3, t0 = 0.5, z = 0.5 * 2) # simulate data
dataAll <- rbind(data1, data2) # join data
dataAll$subject <- rep(c(1, 2), each = 1000) # assign subject id
dataAll
data <- fit_ddm(data = dataAll, rts = "rt", responses = "response", id = "subject")
data
fit_check(parameters = data)
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject)]
dataAll
dataAll$response <- ifelse(dataAll$response == "upper", 1, 0) # convert responses to 1 and 0
dataAll[, .(rt = mean(rt), response = mean(response)), by = .(subject)]
fit_check(parameters = data)
