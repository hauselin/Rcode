# return(optimResults)
trials <- data[, .N, by = .(subj, cond1, cond2)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$temporary_subject <- NULL
}
return(resultsFinal)
}
df1
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = c("cond1"))
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = c("cond1", "cond2"))
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = c("cond2"))
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
df2 <- copy(df1)
df2[, subj := NULL]
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "subj"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = .(subj, cond1, cond2)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'subj') {
resultsFinal$temporary_subject <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "subj"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = .(subj, cond1, cond2)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'subj') {
resultsFinal$subj <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm(data = df2, rts = "rt", responses = "response")
df2
grou
group
rm(group)
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "subj"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = c(subj, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'subj') {
resultsFinal$subj <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "subj"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = c(id, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'subj') {
resultsFinal$subj <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm(data = df2, rts = "rt", responses = "response", cond = "cond1")
fit_ddm(data = df2, rts = "rt", responses = "response", group = "cond1")
fit_ddm(data = df2, rts = "rt", responses = "response", group = c("cond1", "cond2"))
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = c(id, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$subj <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = "cond1")
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = c("cond1", "cond2"))
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = c(id, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$temporary_subject <- NULL
}
return(resultsFinal)
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
trials <- data[, .N, by = c(id, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(trials, resultsWide)
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$temporary_subject <- NULL
}
setDT(resultsFinal)
return(resultsFinal[])
}
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm(data = df2, rts = "rt", responses = "response", group = "cond1")
fit_ddm(data = df2, rts = "rt", responses = "response", group = c("cond1", "cond2"))
fit_ddm <- function(data, rts, responses, id = NULL, group = NULL, startParams = c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)) {
setDT(data)
# check if rt is in seconds
if (data[, mean(get(rts), na.rm = T)] > 10) {
message("Check if reaction time is in seconds, not milliseconds!")
}
# remove rts or responses rows
data <- data[!is.na(get(rts)), ]
data <- data[!is.na(get(responses)), ]
# if response coded as 0 or 1, recode as 'lower' and 'upper'
if (data[, unique(get(responses))][1] %in% c(0, 1)) {
data[, response := as.character(get(responses))]
data[, response := ifelse(get(responses) == "1", 'upper', 'lower')]
}
# if no id variable provided, assume it's just one subject's data
if (is.null(id)) {
id <- "temporary_subject"
data[, (id) := 1]
# message("id variable not provided. Assuming single-subject data.")
}
# define function to calculate likelihood of model parameters given observed data
likelihood_ddm <- function(params, rt, response) {
densities <- ddiffusion(rt = rt, response = response,
a = params['a'],
v = params['v'],
t0 = params['t0'],
z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities))) # return -2 * sum(log-likelihood)
}
# startParams <- c(a = 2, v = 0.1, t0 = 0.3, z = 0.5)
# optimResults <- nlminb(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# optimResults <- ucminf(startParams, likelihood_ddm, rt = data[, get(rts)], response = data[, get(responses)])
# return(optimResults)
dataGroup <- data[, .N, by = c(id, group)]
# optimize for each subject, each condition/group
res <- data[, nlminb(startParams, likelihood_ddm, rt = get(rts), response = get(responses)), by = c(id, group)]
res[, parName := c("a", "v", "t0", "z")]
formulaString <- paste0(id)
if (!is.null(group)) {
for (i in 1:length(group)) {
formulaString <- paste(formulaString, group[i], sep = " + ")
}
formulaString <- paste(formulaString, "iterations", "convergence", "objective", sep = " + ")
}
formulaString <- paste0(formulaString, " ~ parName")
form <- as.formula(formulaString)
resultsWide <- dcast(data = res, formula = form, value.var = c('par'))
resultsWide2 <- left_join(dataGroup, resultsWide, by = c(id, group))
resultsFinal <- select(resultsWide2, id, group, N, a:z, everything())
# remove temporary_subject variable
if (id == 'temporary_subject') {
resultsFinal$temporary_subject <- NULL
}
setDT(resultsFinal)
return(resultsFinal[])
}
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = "cond1")
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj", group = c("cond1", "cond2"))
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm(data = df2, rts = "rt", responses = "response", group = "cond1")
fit_ddm(data = df2, rts = "rt", responses = "response", group = c("cond1", "cond2"))
fit_ddm(data = df2, rts = "rt", responses = "response")
fit_ddm(data = df2, rts = "rt", responses = "response", group = "cond1")
fit_ddm(data = df2, rts = "rt", responses = "response", group = c("cond1", "cond2"))
fit_ddm(data = df1, rts = "rt", responses = "response", id = "subj")
# install packages
packages <- c("rtdists", "ucminf", "data.table")
toInstall <- packages[!(packages %in% installed.packages()[,"Package"])]
if (length(toInstall)) install.packages(toInstall)
rm(packages); rm(toInstall)
library(rtdists); library(ucminf); library(data.table)
