# es()
reportMLM(model1)
reportMLM(model1, 2, T, T)
reportMLM(model1, 2, F, T)
reportMLM(model1, 2, T, F)
model1 <- glm(vs ~ mpg, mtcars, family = "binomial")
reportGLM(model1)
reportGLM(model1, 3, T, T)
model
decimal = 2
showTable = T
showEffectSizesTable = T
# ensure significant digits with sprintf
digits <- paste0("%.", decimal, "f") # e.g, 0.10 not 0.1, 0.009, not 0.01
if (decimal <= 2) {
pdigits <- paste0("%.", 3, "f")
} else {
pdigits <- paste0("%.", decimal, "f")
}
# example output: b = −2.88, SE = 0.32, t(30) = −8.92, p < .001, r = .85
estimates <- data.frame(coef(summary(model))) # get estimates and put in dataframe
if (ncol(estimates) < 5 & (class(model)[1] == "merModLmerTest")) {
return(message("lmerTest failed to compute p values; use summary() to check; try refitting model with lme() from nlme package"))
}
effectNames <- rownames(estimates) # get names of effects
colnames(estimates) <- tolower(colnames(estimates))
colnames(estimates) <- c('estimate', 'std.error', 'df', 'statistic', 'p.value') # rename columns
estimates <- data.frame(term = effectNames, estimates, stringsAsFactors = FALSE)
rownames(estimates) <- NULL
# effect size r (Kashdan & Steger, 2006)
estimates$es.r <-  sqrt((estimates$statistic ^ 2 / (estimates$statistic ^ 2 + estimates$df))) # r
estimates$es.d <-  (2 * estimates$statistic) / sqrt(estimates$df) # d
# make a copy of estimates and convert to correct dp
estimatesCopy <- estimates[, -1]
estimatesRound <- estimatesCopy
estimatesRound[abs(estimatesCopy) >= 0.01] <- round(estimatesRound[abs(estimatesCopy) >= 0.01], decimal)
estimatesRound[abs(estimatesCopy) >= 0.01] <- sprintf(digits, estimatesCopy[abs(estimatesCopy) >= 0.01])
estimatesRound[abs(estimatesCopy) < 0.01] <- signif(estimatesCopy[abs(estimatesCopy) < 0.01], digits = 1)
# estimatesRound[abs(estimatesCopy) < 0.01] <- sprintf(pdigits, estimatesCopy[abs(estimatesCopy) < 0.01])
# fix p values
estimatesRound$p.value <- round(estimates$p.value, decimal + 2)
estimatesRound$p.value <- ifelse(estimatesRound$p.value < .001, "< .001", paste0("= ", sprintf(pdigits, estimatesRound$p.value)))
estimatesRound$p.value <- gsub("= 0.", "= .", estimatesRound$p.value)
# leave df as integers
estimatesRound$df <- round(estimates$df)
formattedOutput <- paste0("b = ", estimatesRound$estimate,
", SE = ", estimatesRound$std.error,
", t(", estimatesRound$df, ")",
" = ", estimatesRound$statistic,
", p ", estimatesRound$p.value,
", r = ", estimatesRound$es.r)
# convert hyphens to minus (only possible on UNIX systems)
if (.Platform$OS.type == 'unix') { # if linux/mac, ensure negative sign is minus, not hyphens
formattedOutput <- gsub("-", replacement = "−", formattedOutput)
}
formattedOutputDf <- data.table(term = as.character(estimates$term),
results = as.character(formattedOutput))
outputList <- list(results = formattedOutputDf)
if (showTable) {
# effect size semi partial R (Edwards et al., 2008)
anovaModel <- data.frame(anova(model))
colnames(anovaModel) <- tolower(colnames(anovaModel))
Fs <- anovaModel$f.value # F-values for each effect (marginal = type 3 SS with Satterthwaite (requires lmerTest package))
numDF <- anovaModel$numdf #numerator DFs
denDF <- anovaModel$dendf #denominator DFs
semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
semiPartialREffect <- data.frame(term = rownames(anovaModel), es.partR2 = semiPartialREffect, stringsAsFactors = F)
for (i in 1:nrow(semiPartialREffect)) {
estimates$es.partR2[grepl(semiPartialREffect$term[i], estimates$term)] <- semiPartialREffect[i, "es.partR2"]
}
# piecewiseSEM (Nakagawa & Schielzeth, 2013)
rsquareds <- sem.model.fits(model)
estimates$es.R2marginal <- rsquareds$Marginal
estimates$es.R2conditional <- rsquareds$Conditional
# format table nicely
estimatesOutput <- data.frame(lapply(estimates[, -1], round, decimal + 1))
estimatesOutput <- data.table(term = as.character(estimates$term), estimatesOutput)
outputList$results2 <- estimatesOutput
}
if (showEffectSizesTable) {
# get all other effect sizes
effectSizes <- es(r = round(as.numeric(estimates$es.r), decimal + 1), decimal = decimal, msg = F)
outputList$effectSizes <- data.frame(term = as.character(estimates$term), effectSizes)
}
outputList
# effect size semi partial R (Edwards et al., 2008)
anovaModel <- data.frame(anova(model))
colnames(anovaModel) <- tolower(colnames(anovaModel))
Fs <- anovaModel$f.value # F-values for each effect (marginal = type 3 SS with Satterthwaite (requires lmerTest package))
numDF <- anovaModel$numdf #numerator DFs
denDF <- anovaModel$dendf #denominator DFs
semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
semiPartialREffect <- data.frame(term = rownames(anovaModel), es.partR2 = semiPartialREffect, stringsAsFactors = F)
for (i in 1:nrow(semiPartialREffect)) {
estimates$es.partR2[grepl(semiPartialREffect$term[i], estimates$term)] <- semiPartialREffect[i, "es.partR2"]
}
model
class(model)
sem.model.fits(model)
model
if (showTable) {
# effect size semi partial R (Edwards et al., 2008)
anovaModel <- data.frame(anova(model))
colnames(anovaModel) <- tolower(colnames(anovaModel))
Fs <- anovaModel$f.value # F-values for each effect (marginal = type 3 SS with Satterthwaite (requires lmerTest package))
numDF <- anovaModel$numdf #numerator DFs
denDF <- anovaModel$dendf #denominator DFs
semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
semiPartialREffect <- data.frame(term = rownames(anovaModel), es.partR2 = semiPartialREffect, stringsAsFactors = F)
for (i in 1:nrow(semiPartialREffect)) {
estimates$es.partR2[grepl(semiPartialREffect$term[i], estimates$term)] <- semiPartialREffect[i, "es.partR2"]
}
# piecewiseSEM (Nakagawa & Schielzeth, 2013)
# rsquareds <- sem.model.fits(model)
# estimates$es.R2marginal <- rsquareds$Marginal
# estimates$es.R2conditional <- rsquareds$Conditional
# format table nicely
estimatesOutput <- data.frame(lapply(estimates[, -1], round, decimal + 1))
estimatesOutput <- data.table(term = as.character(estimates$term), estimatesOutput)
outputList$results2 <- estimatesOutput
}
outputList
options
options("scipen")
library(rtdists)
w1 = .2
w2 = .1
selfval <- round(runif(200, min = 0, max = 20))
selfval
otherval <- round(runif(200, min= 0, max = 20))
otherval
drift = w1*(selfval-10) + w2*(otherval-10)
drift
data <- apply(as.array(drift), 1,
function(x)  rdiffusion(1, a=2, v=x, t0 = .3, z = .4*2 ))
data
drift
data <- matrix(unlist(data), ncol=2, byrow=TRUE)
data
data <- apply(as.array(drift), 1,
function(x)  rdiffusion(1, a=2, v=x, t0 = .3, z = .4*2 ))
data
data <- matrix(unlist(data), ncol=2, byrow=TRUE)
data
data <- apply(as.array(drift), 1,
function(x)  rdiffusion(1, a=2, v=x, t0 = .3, z = .4*2 ))
data
data
unlist(data)
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
w1 = .2
w2 = .1
selfval <- round(runif(200, min = 0, max = 20))
otherval <- round(runif(200, min= 0, max = 20))
drift = w1*(selfval-10) + w2*(otherval-10)
drift
data.table(v = drift)
data.table(v = drift, a = 2)
data.table(v = drift, a = 2, t0 = 0.3)
data_frame(v = drift, a = 2, t0 = 0.3)
data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a)
data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a)
data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a)
df1 <- data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a)
df1
df1 <- tbl_dt(data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
df1
df1
data.table(a = 2, v = drift, t0 = 0.3, z = 0.4 * a)
df1 <- tbl_dt(data_frame(a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
df1
df1
df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z)]
df1
trials <- 200
trials <- 200
w1 = .2
w2 = .1
selfval <- round(runif(trials, min = 0, max = 20))
otherval <- round(runif(trials, min= 0, max = 20))
drift = w1*(selfval-10) + w2*(otherval-10)
drift
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
df1
df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
data <- apply(as.array(drift), 1,
function(x)  rdiffusion(1, a=2, v=x, t0 = .3, z = .4*2 ))
data
data <- matrix(unlist(data), ncol=2, byrow=TRUE)
data
df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
df1
df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
simulatedData
data
data[,2]
[data[,2]==2]
data[,2]==2
trials <- 200
w1 <-  .2
w2 <-  .1
selfval <- round(runif(trials, min = 0, max = 20))
otherval <- round(runif(trials, min= 0, max = 20))
drift = w1 * (selfval - 10) + w2 * (otherval - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
params
c(a = 'abc')
startparams <- c(a = 6, w1 = 0, w2 = 0, t0 = .3, z = .5)
startparams
startparams <- c(w1 = 0, w2 = 0, a = 2, t0 = .3, z = .5)
startparams
params
startparams['w1']
startparams[1]
trials <- 200
weight1 <-  .2
weight2 <-  .1
selfval <- round(runif(trials, min = 0, max = 20))
otherval <- round(runif(trials, min= 0, max = 20))
drift = weight1 * (selfval - 10) + weight2 * (otherval - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
startparams <- c(weight1 = 0, weight2 = 0, a = 2, t0 = .3, z = .5)
startparams
startparams
params <- startparams
params
startParams <- c(weight1 = 0, weight2 = 0, a = 2, t0 = .3, z = .5)
startParams
startParams
params
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
params <- startparams
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
params
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
params <- startParams
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
negativeLogLikelihood <- vector(mode='numeric', length= length(data[,1]))
negativeLogLikelihood
data
length(data[,1])
data
nrow(data)
negativeLogLikelihood <- vector(mode = 'numeric', length = nrow(data))
negativeLogLikelihood
negativeLogLikelihood
1:nrow(data)
.Machine$double.eps
data
data$rt
data <- df1
data
data <- simulatedData
data
data$rt
data$response
params
params['a']
v
params['a']
params
simulatedData
df1
likelihood_ddm <- function(params, data, selfval, otherval) {
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
densities <- ddiffusion(data$rt, data$response, a = params['a'] , v = v[i], t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(negativeLogLikelihood))
}
setwd('/Users/Hause/Dropbox/Working Datasets/')
likelihood_ddm <- function(params, data, selfval, otherval) {
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
densities <- ddiffusion(data$rt, data$response, a = params['a'] , v = v[i], t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
return(-sum(log(densities)))
}
params <- startParams
simulatedData
likelihood_ddm <- function(params, rt, response, selfval, otherval) {
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
densities <- ddiffusion(rt, response, a = params['a'] , v = v[i], t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
return(-sum(log(densities)))
}
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
ddiffusion(rt, response, a = params['a'] , v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
rt <- data$rt
rt
response <- data$response
response
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
v
densities <- ddiffusion(rt, response, a = params['a'] , v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
densities
rt
response
a
params['a']
v
likelihood_ddm <- function(params, rt, response, selfval, otherval) {
v <- params['weight1'] * (selfval - 10) + params['weight2'] * (otherval - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
params <- startParams
nlminb
selfval
trials <- 200
weight1 <-  .2
weight2 <-  .1
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift = weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
trials <- 200
weight1 <-  .2
weight2 <-  .1
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift = weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
data <- simulatedData
rt <- data$rt
response <- data$response
likelihood_ddm <- function(params, rt, response, selfvalue, othervalue) {
v <- params['weight1'] * (selfvalue - 10) + params['weight2'] * (othervalue - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
params <- startParams
nlminb(start, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
likelihood_ddm
simulatedData$rt
simulatedData$response
selfvalue
othervalue
nlminb(start, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
optim(startParams, function(x) likelihood_ddm(x, data, selfvalue, othervalue))
startParams
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
rm(list = ls())
trials <- 200
weight1 <-  .3
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift = weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
trials <- 200
weight1 <-  .3
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift = weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
likelihood_ddm <- function(params, rt, response, selfvalue, othervalue) {
v <- params['weight1'] * (selfvalue - 10) + params['weight2'] * (othervalue - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
optim(startParams, function(x) likelihood_ddm(x, data, selfvalue, othervalue))
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
optim(startParams, simulatedData$rt, simulatedData$response, selfvalue, othervalue)
optim(startParams, simulatedData$rt, simulatedData$response, selfvalue, othervalue)
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
?optim
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
library(rtdists); library(ucminf)
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
nlimnb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
nminlb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
?ucminf
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
trials <- 200
weight1 <-  .4
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift <- weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData[, mean(rt), by = response]
simulatedData[, table(response)]
likelihood_ddm <- function(params, rt, response, selfvalue, othervalue) {
v <- params['weight1'] * (selfvalue - 10) + params['weight2'] * (othervalue - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
simulatedData
trials <- 200
weight1 <-  .4
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift <- weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
# simulatedData[, mean(rt), by = response]
# simulatedData[, table(response)]
likelihood_ddm <- function(params, rt, response, selfvalue, othervalue) {
v <- params['weight1'] * (selfvalue - 10) + params['weight2'] * (othervalue - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
startParams <- c(weight1 = 0.1, weight2 = 0.1, a = 2, t0 = .3, z = .5)
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
startParams <- c(weight1 = 0.4, weight2 = 0.05, a = 2, t0 = .3, z = .5)
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
# optim(startParams, simulatedData$rt, simulatedData$response, selfvalue, othervalue)
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
trials <- 200
weight1 <-  .4
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift <- weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
# simulatedData[, mean(rt), by = response]
# simulatedData[, table(response)]
likelihood_ddm <- function(params, rt, response, selfvalue, othervalue) {
v <- params['weight1'] * (selfvalue - 10) + params['weight2'] * (othervalue - 10)
densities <- ddiffusion(rt, response, a = params['a'], v = v, t0 = params['t0'], z = params['z'] * params['a']) + .Machine$double.eps
return(-2*sum(log(densities)))
}
startParams <- c(weight1 = 0.4, weight2 = 0.05, a = 2, t0 = .3, z = .5)
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
install.packages("tictoc")
library(tictoc)
tic()
optim(startParams, function(x) likelihood_ddm(x, simulatedData$rt, simulatedData$response, selfvalue, othervalue))
toc()
tic()
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
toc()
tic()
nlminb(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
toc()
tic()
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
toc()
tic()
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue, hessian = )
toc()
tic()
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
toc()
tic()
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
toc()
trials <- 500
weight1 <-  .4
weight2 <-  .05
selfvalue <- round(runif(trials, min = 0, max = 20))
othervalue <- round(runif(trials, min= 0, max = 20))
drift <- weight1 * (selfvalue - 10) + weight2 * (othervalue - 10)
df1 <- tbl_dt(data_frame(trial = 1:trials, a = 2, v = drift, t0 = 0.3, z = 0.4 * a))
simulatedData <- df1[, rdiffusion(n = 1, a = a, v = v, t0 = t0, z = z), by = trial]
simulatedData
tic()
ucminf(startParams, likelihood_ddm, rt = simulatedData$rt, response = simulatedData$response, selfvalue = selfvalue, othervalue = othervalue)
toc()
