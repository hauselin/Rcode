return(round(absMADAway, digits))
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return original with outliers replaced
}
}
####test functions####
x <- c(1, 3, 3, 6, 8, 10, 10, 1000)
outliersZ(x, showZValues = F, zCutOff = 1, replaceOutliersWith = NA, outlierIndices = T)
outliersMAD(x, showMADValues = F, replaceOutliersWith = NA, outlierIndices = T)
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer)
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer, outlierIndices = T)
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer, outlierIndices = T)
rm(list = ls())
load("/Users/Hause/Dropbox/Working Projects/160111 MA Project/Intertemporal Choice Analysis/BehavioralData/behavioralData.RData")
outliersZ <- function(x, zCutOff = 1.96, replaceOutliersWith = NA, outlierIndices = FALSE, showZValues = FALSE, digits = 2) {
#clean and identify outliers using Z-score cut-off method
#zCutOff: value to use (1.96 is standard)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#outlierIndices: return index of outlier
#showZValues: if TRUE, will show z score of each value
#digits: rounding digits
#compute standard deviation (sample version n = n [not n-1])
stdev <- sqrt(sum((x - mean(x, na.rm = T))^2, na.rm = T) / sum(!is.na(x)))
#compute absolute Z values for each value
absZ <- abs(x - mean(x, na.rm = T)) / stdev
#subset data that has absZ greater than the zCutOff and replace them with replace
#can also replace with other values (such as max/mean of data)
x[absZ > zCutOff] <- replaceOutliersWith
outliers <- length(x[absZ > zCutOff])
if (showZValues == TRUE) {
message("Showing absolute z-scores for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absZ, digits)) #if values == TRUE, return z score for each value
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return values with outliers replaced
}
}
outliersMAD <- function(x, MADCutOff = 2.5, replaceOutliersWith = NA, showMADValues = FALSE, outlierIndices = FALSE, bConstant = 1.4826, digits = 2) {
#clean and identify outliers using MAD cut-off method (see Leys et al., 2013)
#x: vector
#MADCutOFF: value to use (2.5 is recommended)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#showMADValues:if TRUE, will show MAD for each value instead
#outlierIndices: return index of outlier
#bConstant: usually, b = 1.4826, a constant linked to the assumption of normality of the data, disregarding the abnormality induced by out- liers (Rousseeuw & Croux, 1993).
#digits: rounding digits
#compute number of absolute MADs away for each value: formula: abs( ( x - median(x) ) )/ mad(x)
absMADAway <- abs((x - median(x, na.rm = T))/mad(x, constant = bConstant, na.rm = T))
#subset data that has absMADAway greater than the MADCutOff and replace them with replace
x[absMADAway > MADCutOff] <- replaceOutliersWith
outliers <- length(x[absMADAway > MADCutOff])
if (showMADValues == TRUE) { #if values == TRUE, return number of mads for each value
message("Showing absolute MAD from median for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absMADAway, digits))
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return original with outliers replaced
}
}
save.image("behavioralData.RData")
rm(list = ls())
load("/Users/Hause/Dropbox/Working Projects/160111 MA Project/Intertemporal Choice Analysis/BehavioralData/behavioralData.RData")
outliersZ <- function(x, zCutOff = 1.96, replaceOutliersWith = NA, outlierIndices = FALSE, showZValues = FALSE, digits = 2) {
#clean and identify outliers using Z-score cut-off method
#zCutOff: value to use (1.96 is standard)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#outlierIndices: return index of outlier
#showZValues: if TRUE, will show z score of each value
#digits: rounding digits
#compute standard deviation (sample version n = n [not n-1])
stdev <- sqrt(sum((x - mean(x, na.rm = T))^2, na.rm = T) / sum(!is.na(x)))
#compute absolute Z values for each value
absZ <- abs(x - mean(x, na.rm = T)) / stdev
#subset data that has absZ greater than the zCutOff and replace them with replace
#can also replace with other values (such as max/mean of data)
x[absZ > zCutOff] <- replaceOutliersWith
outliers <- length(x[absZ > zCutOff])
if (showZValues == TRUE) {
message("Showing absolute z-scores for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absZ, digits)) #if values == TRUE, return z score for each value
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return values with outliers replaced
}
}
outliersMAD <- function(x, MADCutOff = 2.5, replaceOutliersWith = NA, showMADValues = FALSE, outlierIndices = FALSE, bConstant = 1.4826, digits = 2) {
#clean and identify outliers using MAD cut-off method (see Leys et al., 2013)
#x: vector
#MADCutOFF: value to use (2.5 is recommended)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#showMADValues:if TRUE, will show MAD for each value instead
#outlierIndices: return index of outlier
#bConstant: usually, b = 1.4826, a constant linked to the assumption of normality of the data, disregarding the abnormality induced by out- liers (Rousseeuw & Croux, 1993).
#digits: rounding digits
#compute number of absolute MADs away for each value: formula: abs( ( x - median(x) ) )/ mad(x)
absMADAway <- abs((x - median(x, na.rm = T))/mad(x, constant = bConstant, na.rm = T))
#subset data that has absMADAway greater than the MADCutOff and replace them with replace
x[absMADAway > MADCutOff] <- replaceOutliersWith
outliers <- length(x[absMADAway > MADCutOff])
if (showMADValues == TRUE) { #if values == TRUE, return number of mads for each value
message("Showing absolute MAD from median for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absMADAway, digits))
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return original with outliers replaced
}
}
save.image("behavioralData.RData")
rm(list = ls())
load("/Users/Hause/Dropbox/Working Projects/160111 MA Project/Intertemporal Choice Analysis/BehavioralData/behavioralData.RData")
source("/Users/Hause/Dropbox/Working Datasets/functionsR/RemoveOutliers.R")
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer, outlierIndices = T)
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer)
outliersMAD(noBrainerChoices$proportionDelayedNoBrainer, outlierIndices = T)
noBrainerChoices[outliersMAD(noBrainerChoices$proportionDelayedNoBrainer, outlierIndices = T)]
boxplot(noBrainerChoices$proportionDelayedNoBrainer)
file.choose()
summarySE2 <- function (data = NULL, measurevar, groupvars = NULL, na.rm = TRUE,
conf.interval = 0.95) {
library(data.table)
data <- data.table(data)
length2 <- function(x, na.rm = FALSE) {
if (na.rm)
sum(!is.na(x))
else length(x)
}
datac <- data[, .(lapply(.SD, length2, na.rm = na.rm),
lapply(.SD, mean, na.rm = na.rm),
lapply(.SD, sd, na.rm = na.rm)),
by = groupvars, .SDcols = measurevar]
names(datac) <- c(groupvars, "N", measurevar, "sd")
setkeyv(datac, groupvars)
datac[, se := unlist(sd) / sqrt(unlist(N))] #compute standard error
ciMult <- qt(conf.interval / 2 + 0.5, unlist(datac$N) - 1)
datac[, ci := se * ciMult]
datac <- data.frame(datac)
return(datac)
}
summarySE2(mtcars, "mpg", "cyl")
summarySE2 <- function (data = NULL, measurevar, groupvars = NULL, na.rm = TRUE, conf.interval = 0.95) {
library(data.table)
data <- data.table(data)
length2 <- function(x, na.rm = FALSE) {
if (na.rm)
sum(!is.na(x))
else length(x)
}
datac <- data[, .(lapply(.SD, length2, na.rm = na.rm),
lapply(.SD, mean, na.rm = na.rm),
lapply(.SD, sd, na.rm = na.rm)),
by = groupvars, .SDcols = measurevar]
names(datac) <- c(groupvars, "N", measurevar, "sd")
setkeyv(datac, groupvars)
datac[, se := unlist(sd) / sqrt(unlist(N))] #compute standard error
ciMult <- qt(conf.interval / 2 + 0.5, unlist(datac$N) - 1)
datac[, ci := se * ciMult]
datac <- data.frame(datac)
return(datac)
}
summarySE2 <- function (data = NULL, measurevar, groupvars = NULL, na.rm = TRUE, conf.interval = 0.95) {
library(data.table)
data <- data.table(data)
length2 <- function(x, na.rm = FALSE) {
if (na.rm)
sum(!is.na(x))
else length(x)
}
datac <- data[, .(lapply(.SD, length2, na.rm = na.rm),
lapply(.SD, mean, na.rm = na.rm),
lapply(.SD, sd, na.rm = na.rm)),
by = groupvars, .SDcols = measurevar]
names(datac) <- c(groupvars, "N", measurevar, "sd")
setkeyv(datac, groupvars)
datac[, se := unlist(sd) / sqrt(unlist(N))] #compute standard error
ciMult <- qt(conf.interval / 2 + 0.5, unlist(datac$N) - 1)
datac[, ci := se * ciMult]
datac <- data.frame(datac)
return(datac)
}
library(dplyr)
data_frame(mtcars)
data_frame(mtcars)
data_frame(mtcars)
mtcars
data_frame(mtcars)
tbl_dt(mtcars)
tbl_df(mtcars)
library(dplyr)
####z-score outlier detection method####
outliersZ <- function(x, zCutOff = 1.96, replaceOutliersWith = NA, outlierIndices = FALSE, showZValues = FALSE, digits = 2) {
#clean and identify outliers using Z-score cut-off method
#zCutOff: value to use (1.96 is standard)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#outlierIndices: return index of outlier
#showZValues: if TRUE, will show z score of each value
#digits: rounding digits
#compute standard deviation (sample version n = n [not n-1])
stdev <- sqrt(sum((x - mean(x, na.rm = T))^2, na.rm = T) / sum(!is.na(x)))
#compute absolute Z values for each value
absZ <- abs(x - mean(x, na.rm = T)) / stdev
#subset data that has absZ greater than the zCutOff and replace them with replace
#can also replace with other values (such as max/mean of data)
x[absZ > zCutOff] <- replaceOutliersWith
outliers <- length(x[absZ > zCutOff])
if (showZValues == TRUE) {
message("Showing absolute z-scores for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absZ, digits)) #if values == TRUE, return z score for each value
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return values with outliers replaced
}
}
####median absolute deviation outlier detection method####
outliersMAD <- function(x, MADCutOff = 2.5, replaceOutliersWith = NA, showMADValues = FALSE, outlierIndices = FALSE, bConstant = 1.4826, digits = 2) {
#clean and identify outliers using MAD cut-off method (see Leys et al., 2013)
#x: vector
#MADCutOFF: value to use (2.5 is recommended)
#replaceOutliersWith: if value is an outlier, what to replace it with? NA by default
#showMADValues:if TRUE, will show MAD for each value instead
#outlierIndices: return index of outlier
#bConstant: usually, b = 1.4826, a constant linked to the assumption of normality of the data, disregarding the abnormality induced by out- liers (Rousseeuw & Croux, 1993).
#digits: rounding digits
#compute number of absolute MADs away for each value: formula: abs( ( x - median(x) ) )/ mad(x)
absMADAway <- abs((x - median(x, na.rm = T))/mad(x, constant = bConstant, na.rm = T))
#subset data that has absMADAway greater than the MADCutOff and replace them with replace
x[absMADAway > MADCutOff] <- replaceOutliersWith
outliers <- length(x[absMADAway > MADCutOff])
if (showMADValues == TRUE) { #if values == TRUE, return number of mads for each value
message("Showing absolute MAD from median for each value.")
message(paste0(outliers, " outliers detected."))
return(round(absMADAway, digits))
} else if (outlierIndices == TRUE) {
message("Showing indices of outliers.")
return(which(is.na(x)))
} else {
message(paste0(outliers, " outliers detected."))
message(paste0("Outliers replaced with ", replaceOutliersWith))
return(round(x, digits)) #otherwise, return original with outliers replaced
}
}
####test functions####
#x <- c(1, 3, 3, 6, 8, 10, 10, 1000)
#outliersZ(x, showZValues = F, zCutOff = 1, replaceOutliersWith = NA, outlierIndices = T)
#outliersMAD(x, showMADValues = F, replaceOutliersWith = NA, outlierIndices = T)
mtcars
library(dplyr); library(data.table); library(ggplot2); library(tidyr); library(broom); library(dtplyr); library(cowplot); library(lme4); library(lmerTest); library(tibble); library(ggbeeswarm)
mtcars
mtcars[mpg == 21]
df <- tbl_dt(mtcars)
df
df[mpg == 21]
df
outliersZ(df$mpg)
args(outliersZ)
outliersZ(df$mpg)
outliersZ(df$mpg, zCutOff = 3)
outliersZ(df$mpg, zCutOff = 1)
outliersZ(df$mpg, zCutOff = 5)
outliersZ
outliersZ
lm
outliersZ(df$mpg, showZValues = T)
outliersZ(df$mpg, showZValues = T)
outliersZ(df$mpg, zCutOff = 2)
outliersZ(df$mpg, zCutOff = 1.5)
outliersZ(df$mpg, zCutOff = 1.5, showZValues = T)
outliersMAD(df$mpg)
df
df[, .(mpg = mean(mpg, na.rm = T))]
mean(df$mpg)
df[, .(mpg = mean(mpg, na.rm = T)), by = .(cyl)]
df[, .(mpg = mean(mpg, na.rm = T)), by = .(cyl, am)]
df[, .(mpg = mean(mpg, na.rm = T)), by = .(cyl, am, vs)]
df[, .(mpg = mean(mpg, na.rm = T)), by = .(cyl)]
df[, mpg := 1, by = .(cyl)]
df <- tbl_dt(df)
df
df <- tbl_dt(mtcars)
df
df[, mpg := outliersMAD(mpg), by = .(cyl)]
df[, is.na(mpg)]
df[is.na(mpg)]
df
df[is.na(mpg), , by = cyl]
df[, mean(mpg)]
df[, mean(mpg), by = cyl]
reportMLM <- function(model, decimal = 2) {
message("Fixed effects for MLM with effect sizes r, d")
print("r: .10 (small), .30 (medium), .50 (large)")
print("d: 0.20 (small), 0.50 (medium), .80 (large)")
estimates <- data.frame(coef(summary(model)))
effectNames <- rownames(estimates)
colnames(estimates) <- tolower(colnames(estimates))
colnames(estimates) <- c('estimate', 'se', 'df', 'statistic', 'p')
# effect sizes (Kashdan & Steger, 2006)
estimates$es.r <-  sqrt((estimates$statistic ^ 2 / (estimates$statistic ^ 2 + estimates$df))) # r
estimates$es.d <-  (2 * estimates$statistic) / sqrt(estimates$df) # d
# effect size semi partial R (Edwards et al., 2008)
#Fs <- anova(model, type = 'marginal')$F # F-values for each effect (marginal = type 3 SS)
#numDF <- anova(model, type = 'marginal')$numDF #numerator DFs
#denDF <- anova(model, type = 'marginal')$denDF #denominator DFs
#semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
#estimates$es.R2 <- semiPartialREffect
if (decimal < 3) {
pvalues <- round(estimates[, 'p'], 3) # save 3 dp p value in variable
estimates <- round(estimates, decimal) #convert variables to smaller decimal place
estimates[, 'p'] <- pvalues # always minimum 3 dp for p value
} else {
estimates <- round(estimates, decimal)
}
estimates[, 'df'] <- round(estimates[, 'df']) # always round df to whole number
for (i in 1:nrow(estimates)) {
if (estimates[i, 'p'] >= 0.001) { # if p value is >= .001, always print exact p value
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p = %s, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.3f', estimates[i, 'p']), 2),
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
} else if (estimates[i, 'p'] < 0.001) { # if p value < .001, then always print p < .001
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p < .001, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
}
}
return(estimates)
}
reportMLM <- function(model, decimal = 2) {
message("Fixed effects for MLM with effect sizes r, d (only tested with lme and lmer functions")
print("r: .10 (small), .30 (medium), .50 (large)")
print("d: 0.20 (small), 0.50 (medium), .80 (large)")
estimates <- data.frame(coef(summary(model)))
effectNames <- rownames(estimates)
colnames(estimates) <- tolower(colnames(estimates))
colnames(estimates) <- c('estimate', 'se', 'df', 'statistic', 'p')
# effect sizes (Kashdan & Steger, 2006)
estimates$es.r <-  sqrt((estimates$statistic ^ 2 / (estimates$statistic ^ 2 + estimates$df))) # r
estimates$es.d <-  (2 * estimates$statistic) / sqrt(estimates$df) # d
# effect size semi partial R (Edwards et al., 2008)
#Fs <- anova(model, type = 'marginal')$F # F-values for each effect (marginal = type 3 SS)
#numDF <- anova(model, type = 'marginal')$numDF #numerator DFs
#denDF <- anova(model, type = 'marginal')$denDF #denominator DFs
#semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
#estimates$es.R2 <- semiPartialREffect
if (decimal < 3) {
pvalues <- round(estimates[, 'p'], 3) # save 3 dp p value in variable
estimates <- round(estimates, decimal) #convert variables to smaller decimal place
estimates[, 'p'] <- pvalues # always minimum 3 dp for p value
} else {
estimates <- round(estimates, decimal)
}
estimates[, 'df'] <- round(estimates[, 'df']) # always round df to whole number
for (i in 1:nrow(estimates)) {
if (estimates[i, 'p'] >= 0.001) { # if p value is >= .001, always print exact p value
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p = %s, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.3f', estimates[i, 'p']), 2),
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
} else if (estimates[i, 'p'] < 0.001) { # if p value < .001, then always print p < .001
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p < .001, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
}
}
return(estimates)
}
lm(mtcars ~ cyl)
lm(mtcars ~ cyl, data = mtcars)
lm(mpg ~ cyl, data = mtcars)
reportMLM(lm(mpg ~ cyl, data = mtcars))
summarylm((mpg ~ cyl, data = mtcars))
summary(lm((mpg ~ cyl, data = mtcars)))
summary(lm(mpg ~ cyl, data = mtcars))
coef(summary(lm(mpg ~ cyl, data = mtcars)))
lm(mpg ~ cyl, data = mtcars)
summary(lm(mpg ~ cyl, data = mtcars))
summary(lm(mpg ~ cyl + am, data = mtcars))
summary(lm(mpg ~ cyl + am + vs, data = mtcars))
df.residual(summary(lm(mpg ~ cyl + am + vs, data = mtcars)))
df.residual(lm(mpg ~ cyl + am + vs, data = mtcars))
reportMLM <- function(model, decimal = 2) {
message("Fixed effects for MLM with effect sizes r, d (only works with lme and lmer")
print("r: .10 (small), .30 (medium), .50 (large)")
print("d: 0.20 (small), 0.50 (medium), .80 (large)")
estimates <- data.frame(coef(summary(model)))
effectNames <- rownames(estimates)
colnames(estimates) <- tolower(colnames(estimates))
colnames(estimates) <- c('estimate', 'se', 'df', 'statistic', 'p')
# effect sizes (Kashdan & Steger, 2006)
estimates$es.r <-  sqrt((estimates$statistic ^ 2 / (estimates$statistic ^ 2 + estimates$df))) # r
estimates$es.d <-  (2 * estimates$statistic) / sqrt(estimates$df) # d
# effect size semi partial R (Edwards et al., 2008)
#Fs <- anova(model, type = 'marginal')$F # F-values for each effect (marginal = type 3 SS)
#numDF <- anova(model, type = 'marginal')$numDF #numerator DFs
#denDF <- anova(model, type = 'marginal')$denDF #denominator DFs
#semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
#estimates$es.R2 <- semiPartialREffect
if (decimal < 3) {
pvalues <- round(estimates[, 'p'], 3) # save 3 dp p value in variable
estimates <- round(estimates, decimal) #convert variables to smaller decimal place
estimates[, 'p'] <- pvalues # always minimum 3 dp for p value
} else {
estimates <- round(estimates, decimal)
}
estimates[, 'df'] <- round(estimates[, 'df']) # always round df to whole number
for (i in 1:nrow(estimates)) {
if (estimates[i, 'p'] >= 0.001) { # if p value is >= .001, always print exact p value
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p = %s, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.3f', estimates[i, 'p']), 2),
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
} else if (estimates[i, 'p'] < 0.001) { # if p value < .001, then always print p < .001
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p < .001, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
}
}
return(estimates)
}
reportMLM <- function(model, decimal = 2) {
message("Fixed effects for MLM with effect sizes r, d (only works with lme and lmer fitted models")
print("r: .10 (small), .30 (medium), .50 (large)")
print("d: 0.20 (small), 0.50 (medium), .80 (large)")
estimates <- data.frame(coef(summary(model)))
effectNames <- rownames(estimates)
colnames(estimates) <- tolower(colnames(estimates))
colnames(estimates) <- c('estimate', 'se', 'df', 'statistic', 'p')
# effect sizes (Kashdan & Steger, 2006)
estimates$es.r <-  sqrt((estimates$statistic ^ 2 / (estimates$statistic ^ 2 + estimates$df))) # r
estimates$es.d <-  (2 * estimates$statistic) / sqrt(estimates$df) # d
# effect size semi partial R (Edwards et al., 2008)
#Fs <- anova(model, type = 'marginal')$F # F-values for each effect (marginal = type 3 SS)
#numDF <- anova(model, type = 'marginal')$numDF #numerator DFs
#denDF <- anova(model, type = 'marginal')$denDF #denominator DFs
#semiPartialREffect <- (numDF / denDF * Fs) / (1 + (numDF / denDF * Fs)) # effect sizes
#estimates$es.R2 <- semiPartialREffect
if (decimal < 3) {
pvalues <- round(estimates[, 'p'], 3) # save 3 dp p value in variable
estimates <- round(estimates, decimal) #convert variables to smaller decimal place
estimates[, 'p'] <- pvalues # always minimum 3 dp for p value
} else {
estimates <- round(estimates, decimal)
}
estimates[, 'df'] <- round(estimates[, 'df']) # always round df to whole number
for (i in 1:nrow(estimates)) {
if (estimates[i, 'p'] >= 0.001) { # if p value is >= .001, always print exact p value
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p = %s, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.3f', estimates[i, 'p']), 2),
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
} else if (estimates[i, 'p'] < 0.001) { # if p value < .001, then always print p < .001
message(
sprintf("b = %.2f, SE = %.2f, t(%.0f) = %.2f, p < .001, r = %s",
estimates[i, 'estimate'], estimates[i, 'se'],
estimates[i, 'df'], estimates[i, 'statistic'],
substring(sprintf('%.2f', estimates[i, 'es.r']), 2))
)
}
}
return(estimates)
}
reportMLM()
reportMLM
